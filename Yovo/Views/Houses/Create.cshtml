
@model Yovo.Viewmodel.HouseSpecsViewModel
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!--Script for Bing Maps START-->
<!-- jQuery 2.2.4 -->
<script src="~/Scripts/jquery.min.js"></script>
<script type='text/javascript' src='http://www.bing.com/api/maps/mapcontrol?callback=GetMap&key=AjtUzWJBHlI3Ma_Ke6Qv2fGRXEs0ua5hUQi54ECwfXTiWsitll4AkETZDihjcfeI' async defer></script>
<!--Script for Bing Maps END-->

<h2>Create</h2>

@using (Html.BeginForm("Create", "Houses", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-6">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 ">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group col-xs-12 col-sm-6 col-md-12 col-lg-12">
                    @Html.LabelFor(model => model.House.Title, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-8 col-md-12 col-lg-12">
                        @Html.EditorFor(model => model.House.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.House.Title, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-xs-12 col-sm-6 col-md-12 col-lg-12">
                    @Html.LabelFor(model => model.House.Description, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-8 col-md-12 col-lg-12">
                        @Html.EditorFor(model => model.House.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.House.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-xs-12 col-sm-6 col-md-12 col-lg-12">
                    @Html.LabelFor(model => model.House.Rooms, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-8 col-md-12 col-lg-12">
                        @Html.EditorFor(model => model.House.Rooms, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.House.Rooms, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-xs-12 col-sm-6 col-md-6 col-lg-12">
                    @Html.LabelFor(model => model.House.Visitors, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-8 col-md-8 col-lg-12">
                        @Html.EditorFor(model => model.House.Visitors, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.House.Visitors, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-xs-12 col-sm-6 col-md-6 col-lg-12">
                    @Html.LabelFor(model => model.House.SquareMeters, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-8 col-md-8 col-lg-12">
                        @Html.EditorFor(model => model.House.SquareMeters, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.House.SquareMeters, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-xs-12 col-sm-6 col-md-6 col-lg-12">
                    @Html.LabelFor(model => model.House.Price, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-8 col-md-8 col-lg-12">
                        @Html.EditorFor(model => model.House.Price, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.House.Price, "", new { @class = "text-danger" })
                    </div>
                </div>
                <h5>Amenities</h5>
                <hr />

                <div class="col-md-12">
                    @Html.EditorFor(model => model.Features)
                </div>
                <h5>House Photo</h5>
                <div class="form-group col-md-12">

                    <input type="file" id="image1" name="image1" />
                </div>
                <hr />
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-outline-success waves-effect" />
                </div>

            </div>
        </div>
        <div class="col-md-6">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="form-group col-xs-12 col-sm-6 col-md-6 col-lg-12">
                    <div class="control-label col-md-4">City</div>
                    <div class="col-xs-12 col-sm-8 col-md-8 col-lg-12">
                        @Html.EditorFor(model => model.Address.Country, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address.Country, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-md-6 col-lg-12">
                    @Html.LabelFor(model => model.Address.Region, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-8 col-md-8 col-lg-12">
                        @Html.EditorFor(model => model.Address.Region, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address.Region, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-md-6 col-lg-12">
                    @Html.LabelFor(model => model.Address.Street, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-8 col-md-8 col-lg-12">
                        @Html.EditorFor(model => model.Address.Street, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address.Street, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-md-6 col-lg-12">
                    @Html.LabelFor(model => model.Address.Latitude, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-8 col-md-8 col-lg-12">
                        @Html.EditorFor(model => model.Address.Latitude, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address.Latitude, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-md-6 col-lg-12">
                    @Html.LabelFor(model => model.Address.Longitude, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-8 col-md-8 col-lg-12">
                        @Html.EditorFor(model => model.Address.Longitude, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address.Longitude, "", new { @class = "text-danger" })
                        <input type="button" value="find me" class="btn btn-primary" onClick="geocode()" />
                    </div>
                </div>
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-12 ">
                        <div id="myMap" style="position:relative;width:100%; height:300px;"></div>
                    </div>
                </div>

            </div>
        </div>
    </div>
}
@*@RenderPage("~/Views/Shared/_PartialPagePhotos.cshtml")*@
@* @Html.ActionLink("Back to List", "Index") *@


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}
<script>
    function GetMap() {
        var default_map;
        default_map = new Microsoft.Maps.Map('#myMap', {
            center: new Microsoft.Maps.Location(40.63640246266535, 22.944573389221176),
            zoom: 12
        });
    }
    var BingMapsKey = 'AjtUzWJBHlI3Ma_Ke6Qv2fGRXEs0ua5hUQi54ECwfXTiWsitll4AkETZDihjcfeI';
    var map;
    function geocode() {
        var street = document.getElementById('Address_Street').value;
        var region = document.getElementById('Address_Region').value;
        var city = document.getElementById('Address_Country').value;

        var geocodeRequest = "http://dev.virtualearth.net/REST/v1/Locations?query=" + encodeURIComponent(region) + "/" + encodeURIComponent(street) + "/" + encodeURIComponent(city) + "&key=" + BingMapsKey;

        CallRestService(geocodeRequest, GeocodeCallback);
    }

    function GeocodeCallback(response) {
        var output = document.getElementById('output');

        if (response && response.resourceSets && response.resourceSets.length > 0 && response.resourceSets[0].resources) {

            var results = response.resourceSets[0].resources;

            //--------------------------------------------------------
            map = new Microsoft.Maps.Map('#myMap', {
                center: new Microsoft.Maps.Location(results[0].point.coordinates[0], results[0].point.coordinates[1]),
                zoom: 18
            });
            var greenPin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(results[0].point.coordinates[0], results[0].point.coordinates[1]), { color: '#0f0', icon: 'offline_marker.png', draggable: true });
            map.entities.push(greenPin);
            Microsoft.Maps.Events.addHandler(greenPin, 'dragend', function (e) { highlight(e); });
            Microsoft.Maps.loadModule('Microsoft.Maps.AutoSuggest', function () {
                var manager = new Microsoft.Maps.AutosuggestManager({ map: map });
                manager.attachAutosuggest('#full', ".address", selectedSuggestion);
            });
            document.getElementById("Address_Latitude").value = results[0].point.coordinates[0];
            document.getElementById("Address_Longitude").value = results[0].point.coordinates[1];
            //--------------------------------------------------------

        } else {
            alert("No results found.");
        }
    }
    function highlight(event) {
        var coord;
        //var latitude;
        //Highlight the mouse event div to indicate that the event has fired.
        //document.getElementById(id).style.background = 'LightGreen';
        coord = event.target.getLocation().toString().replace(/[^0-9.,]+/g, "");
        var index = coord.indexOf(",");  // Gets the first index where a space occours
        var a = coord.substr(0, index);
        var b = coord.substr(index + 1);
        //longitude = coordinates.substr(1, index);
        document.getElementById("Address_Latitude").value = a;
        document.getElementById("Address_Longitude").value = b;
        setTimeout(function () { document.getElementById(id).style.background = 'white'; }, 1000);
    }
    function selectedSuggestion(result) {
        //Remove previously selected suggestions from the map.
        map.entities.clear();

        //Show the suggestion as a pushpin and center map over it.
        var pin = new Microsoft.Maps.Pushpin(result.location);
        map.entities.push(pin);
        map.setView({ bounds: result.bestView });
    }
    function CallRestService(request, callback) {
        $.ajax({
            url: request,
            dataType: "jsonp",
            jsonp: "jsonp",
            success: function (r) {
                callback(r);
            },
            error: function (e) {
                alert(e.statusText);
            }
        });
    }

</script>
